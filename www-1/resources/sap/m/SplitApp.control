<?xml version="1.0" ?>
<control xmlns="http://www.sap.com/sap.ui.library.xsd" >

	<name>SplitApp</name>
	<author>SAP AG</author>
	<documentation>SplitApp is another root element of a UI5 mobile application besides App control. It maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitApp.</documentation>
	<baseType>sap.ui.core/Control</baseType>
	<properties>
		<property group="Misc" name="homeIcon" type="any">
			<documentation>The icon to be displayed on the home screen of iOS devices after the user does &quot;add to home screen&quot;.
This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes; one example is:

SplitApp.setHomeIcon({
   'phone':'phone-icon.png',
   'phone@2':'phone-retina.png',
   'tablet':'tablet-icon.png',
   'tablet@2':'tablet-retina.png'
});

The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
If an object is given but the required size is missing from the object, the largest given URL will be used.</documentation>
		</property>
		<property group="Appearance" name="defaultTransitionNameDetail" type="sap.ui.core/string" defaultValue='"slide"'>
			<documentation>The type of the transition/animation to apply when &quot;to()&quot; is called without defining the transition to use. The default is &quot;slide&quot;, other options are: &quot;fade&quot; and &quot;show&quot; and the names of any registered custom transitions.</documentation>
		</property>
		<property group="Appearance" name="defaultTransitionNameMaster" type="sap.ui.core/string" defaultValue='"slide"'>
			<documentation>The type of the transition/animation to apply when &quot;to()&quot; is called without defining the transition to use. The default is &quot;slide&quot;, other options are: &quot;fade&quot; and &quot;show&quot; and the names of any registered custom transitions.</documentation>
		</property>
		<property group="Appearance" name="mode" type="sap.m/SplitAppMode" defaultValue="ShowHideMode">
			<documentation>This mode defines whether the master page will always be shown (in portrait and in landscape)[StretchCompressMode], or if it should be hidden when in protrait mode [ShowHideMode]. Default is ShowHideMode</documentation>
		</property>
		<property group="Appearance" type="sap.ui.core/string" name="masterButtonText">
			<documentation>This is the text shown in master button which has a default value &quot;Navigation&quot;. This text is only shown in iOS platform and the icon from the current page in detail area is shown in the master button in the other platfroms.

The master button is shown/hidden depending on the orientation of device and also whether the master area is open or not. SplitApp manages the show/hide of master button by itself only when the page added to detail area are sap.m.Page with built-in header or sap.m.Page with built-in header which is wrapped by one or several sap.ui.core.mvc.View. Otherwise the show/hide of master button needs to be managed by the application.</documentation>
		</property>
	</properties>
	<events>
		<event name="orientationChange">
			<documentation>This event will be fired when orientation (portrait/landscape) is changed.</documentation>
			<parameters>
				<parameter type="sap.ui.core/boolean" name="landscape">
					<documentation>Returns true if the device is in landscape.</documentation>
				</parameter>
			</parameters>
		</event>
		<event name="masterNavigate">
			<documentation>The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</documentation>
			<parameters>
				<parameter name="from" type="sap.ui.core/Control">
					<documentation>The page which was shown before the current navigation.</documentation>
				</parameter>
				<parameter name="fromId" type="sap.ui.core/string">
					<documentation>The ID of the page which was shown before the current navigation.</documentation>
				</parameter>
				<parameter name="to" type="sap.ui.core/Control">
					<documentation>The page which will be shown after the current navigation.</documentation>
				</parameter>
				<parameter name="toId" type="sap.ui.core/string">
					<documentation>The ID of the page which will be shown after the current navigation.</documentation>
				</parameter>
				<parameter name="firstTime" type="sap.ui.core/boolean">
					<documentation>Whether the &quot;to&quot; page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</documentation>
				</parameter>
				<parameter name="isTo" type="sap.ui.core/boolean">
					<documentation>Whether this is a forward navigation, triggered by &quot;to()&quot;.</documentation>
				</parameter>
				<parameter name="isBack" type="sap.ui.core/boolean">
					<documentation>Whether this is a back navigation, triggered by &quot;back()&quot;.</documentation>
				</parameter>
				<parameter name="isBackToTop" type="sap.ui.core/boolean">
					<documentation>Whether this is a navigation to the root page, triggered by &quot;backToTop()&quot;.</documentation>
				</parameter>
				<parameter name="isBackToPage" type="sap.ui.core/boolean" since="1.7.2">
					<documentation>Whether this was a navigation to the root page, triggered by &quot;backToTop()&quot;.</documentation>
				</parameter>
				<parameter name="direction" type="sap.ui.core/string">
					<documentation>How the navigation was triggered, possible values are &quot;to&quot;, &quot;back&quot;, and &quot;backToTop&quot;.</documentation>
				</parameter>
			</parameters>
		</event>
		<event name="afterMasterNavigate">
			<documentation>The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the &quot;navigate&quot; event.</documentation>
			<parameters>
				<parameter name="from" type="sap.ui.core/Control">
					<documentation>The page which had been shown before navigation.</documentation>
				</parameter>
				<parameter name="fromId" type="sap.ui.core/string">
					<documentation>The ID of the page which had been shown before navigation.</documentation>
				</parameter>
				<parameter name="to" type="sap.ui.core/Control">
					<documentation>The page which is now shown after navigation.</documentation>
				</parameter>
				<parameter name="toId" type="sap.ui.core/string">
					<documentation>The ID of the page which is now shown after navigation.</documentation>
				</parameter>
				<parameter name="firstTime" type="sap.ui.core/boolean">
					<documentation>Whether the &quot;to&quot; page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</documentation>
				</parameter>
				<parameter name="isTo" type="sap.ui.core/boolean">
					<documentation>Whether was a forward navigation, triggered by &quot;to()&quot;.</documentation>
				</parameter>
				<parameter name="isBack" type="sap.ui.core/boolean">
					<documentation>Whether this was a back navigation, triggered by &quot;back()&quot;.</documentation>
				</parameter>
				<parameter name="isBackToTop" type="sap.ui.core/boolean">
					<documentation>Whether this was a navigation to the root page, triggered by &quot;backToTop()&quot;.</documentation>
				</parameter>
				<parameter name="isBackToPage" type="sap.ui.core/boolean" since="1.7.2">
					<documentation>Whether this was a navigation to the root page, triggered by &quot;backToTop()&quot;.</documentation>
				</parameter>
				<parameter name="direction" type="sap.ui.core/string">
					<documentation>How the navigation was triggered, possible values are &quot;to&quot;, &quot;back&quot;, and &quot;backToTop&quot;.</documentation>
				</parameter>
			</parameters>
		</event>
		<event name="masterButton">
			<documentation>Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitApp control does not handle the placement of the master button automatically.</documentation>
		</event>
		<event name="beforeMasterOpen">
			<documentation>This event is fired before the master area is opened.</documentation>
		</event>
		<event name="afterMasterOpen">
			<documentation>This event is fired when the master area is fully opened after animation if there is.</documentation>
		</event>
		<event name="beforeMasterClose">
			<documentation>This event is fired before the master area is closed.</documentation>
		</event>
		<event name="afterMasterClose">
			<documentation>This event is fired when the master area is fully closed after the animation when there is.</documentation>
		</event>
		<event name="detailNavigate">
			<documentation>The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</documentation>
			<parameters>
				<parameter name="from" type="sap.ui.core/Control">
					<documentation>The page which was shown before the current navigation.</documentation>
				</parameter>
				<parameter name="fromId" type="sap.ui.core/string">
					<documentation>The ID of the page which was shown before the current navigation.</documentation>
				</parameter>
				<parameter name="to" type="sap.ui.core/Control">
					<documentation>The page which will be shown after the current navigation.</documentation>
				</parameter>
				<parameter name="toId" type="sap.ui.core/string">
					<documentation>The ID of the page which will be shown after the current navigation.</documentation>
				</parameter>
				<parameter name="firstTime" type="sap.ui.core/boolean">
					<documentation>Whether the &quot;to&quot; page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</documentation>
				</parameter>
				<parameter name="isTo" type="sap.ui.core/boolean">
					<documentation>Whether this is a forward navigation, triggered by &quot;to()&quot;.</documentation>
				</parameter>
				<parameter name="isBack" type="sap.ui.core/boolean">
					<documentation>Whether this is a back navigation, triggered by &quot;back()&quot;.</documentation>
				</parameter>
				<parameter name="isBackToTop" type="sap.ui.core/boolean">
					<documentation>Whether this is a navigation to the root page, triggered by &quot;backToTop()&quot;.</documentation>
				</parameter>
				<parameter name="isBackToPage" type="sap.ui.core/boolean" since="1.7.2">
					<documentation>Whether this was a navigation to the root page, triggered by &quot;backToTop()&quot;.</documentation>
				</parameter>
				<parameter name="direction" type="sap.ui.core/string">
					<documentation>How the navigation was triggered, possible values are &quot;to&quot;, &quot;back&quot;, and &quot;backToTop&quot;.</documentation>
				</parameter>
			</parameters>
		</event>
		<event name="afterDetailNavigate">
			<documentation>The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the &quot;navigate&quot; event.</documentation>
			<parameters>
				<parameter name="from" type="sap.ui.core/Control">
					<documentation>The page which had been shown before navigation.</documentation>
				</parameter>
				<parameter name="fromId" type="sap.ui.core/string">
					<documentation>The ID of the page which had been shown before navigation.</documentation>
				</parameter>
				<parameter name="to" type="sap.ui.core/Control">
					<documentation>The page which is now shown after navigation.</documentation>
				</parameter>
				<parameter name="toId" type="sap.ui.core/string">
					<documentation>The ID of the page which is now shown after navigation.</documentation>
				</parameter>
				<parameter name="firstTime" type="sap.ui.core/boolean">
					<documentation>Whether the &quot;to&quot; page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</documentation>
				</parameter>
				<parameter name="isTo" type="sap.ui.core/boolean">
					<documentation>Whether was a forward navigation, triggered by &quot;to()&quot;.</documentation>
				</parameter>
				<parameter name="isBack" type="sap.ui.core/boolean">
					<documentation>Whether this was a back navigation, triggered by &quot;back()&quot;.</documentation>
				</parameter>
				<parameter name="isBackToTop" type="sap.ui.core/boolean">
					<documentation>Whether this was a navigation to the root page, triggered by &quot;backToTop()&quot;.</documentation>
				</parameter>
				<parameter name="isBackToPage" type="sap.ui.core/boolean" since="1.7.2">
					<documentation>Whether this was a navigation to the root page, triggered by &quot;backToTop()&quot;.</documentation>
				</parameter>
				<parameter name="direction" type="sap.ui.core/string">
					<documentation>How the navigation was triggered, possible values are &quot;to&quot;, &quot;back&quot;, and &quot;backToTop&quot;.</documentation>
				</parameter>
			</parameters>
		</event>
		
	</events>
	<aggregations>
		<aggregation cardinality="0..n" name="masterPages" type="sap.ui.core/Control">
			<documentation>The content entities between which this SplitApp navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.

These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}</documentation>
		</aggregation>
		<aggregation cardinality="0..n" name="detailPages" type="sap.ui.core/Control">
			<documentation>The content entities between which this SplitApp navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.

These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}</documentation>
		</aggregation>
		<aggregation cardinality="0..1" name="_navMaster" type="sap.m/NavContainer" visibility="hidden">
			<documentation>The master navigation container managed by this SplitApp control</documentation>
		</aggregation>
		<aggregation cardinality="0..1" name="_navDetail" type="sap.m/NavContainer" visibility="hidden">
			<documentation>The detail navigation container managed by this SplitApp control</documentation>
		</aggregation>
		<aggregation cardinality="0..1" name="_navPopover" type="sap.m/Popover" visibility="hidden">
			<documentation>A Popover managed by this SplitApp control</documentation>
		</aggregation>
	</aggregations>
	<associations>
		<association cardinality="0..1" name="initialDetail" type="sap.ui.core/Control">
			<documentation>Sets the initial detail page, which is shown on application launch.</documentation>
		</association>
		<association cardinality="0..1" name="initialMaster" type="sap.ui.core/Control">
			<documentation>Sets the initial master page, which is shown on application launch.</documentation>
		</association>
	</associations>
	<methods>
		<method name="to" type="sap.m/SplitApp" since="1.10.0">
			<documentation>Navigate to given page inside the SplitApp. The navigation is done inside the master area if the page has been added, otherwise it tries to do the page navigation in the detail area.</documentation>
			<parameters>
				<parameter type="sap.ui.core/string" name="pageId">
					<documentation>The screen to which drilldown should happen. The ID or the control itself can be given.</documentation>
				</parameter>
				<parameter name="transitionName" type="sap.ui.core/string">
					<documentation>The type of the transition/animation to apply. This parameter can be omitted; then the default is &quot;slide&quot; (horizontal movement from the right).
Other options are: &quot;fade&quot;, &quot;flip&quot;, and &quot;show&quot; and the names of any registered custom transitions. 

None of the standard transitions is currently making use of any given transition parameters.</documentation>
				</parameter>
				<parameter name="data" type="sap.ui.core/object">
					<documentation>This optional object can carry any payload data which should be made available to the target page. The &quot;beforeShow&quot; event on the target page will contain this data object as &quot;data&quot; property.

Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.

When the &quot;transitionParameters&quot; object is used, this &quot;data&quot; object must also be given (either as object or as null) in order to have a proper parameter order.</documentation>
				</parameter>
				<parameter name="transitionParameters" type="sap.ui.core/object">
					<documentation>This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.

For a proper parameter order, the &quot;data&quot; parameter must be given when the &quot;transitionParameters&quot; parameter is used. (it can be given as &quot;null&quot;)

NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition. 
The &quot;show&quot;, &quot;slide&quot; and &quot;fade&quot; transitions do not use any parameter.</documentation>
				</parameter>
			</parameters>
		</method>
		<method name="backToPage" type="sap.m/SplitApp" since="1.10.0">
			<documentation>Navigates back to the nearest previous page in the SplitApp history with the given ID. If there is no such page among the previous pages, nothing happens.
The transition effect which had been used to get to the current page is inverted and used for this navigation.

Calling this navigation method triggers first the (cancelable) &quot;navigate&quot; event on the SplitApp, then the  &quot;beforeHide&quot; pseudo event on the source page and &quot;beforeFirstShow&quot; (if applicable) and&quot;beforeShow&quot; on the target page. Later - after the transition has completed - the &quot;afterShow&quot; pseudo event is triggered on the target page and &quot;afterHide&quot; on the page which has been left. The given backData object is available in the &quot;beforeFirstShow&quot;, &quot;beforeShow&quot; and &quot;afterShow&quot; event object as &quot;data&quot; property. The original &quot;data&quot; object from the &quot;to&quot; navigation is also available in these event objects.</documentation>
			<parameters>
				<parameter type="sap.ui.core/string" name="pageId">
					<documentation>The screen to which drilldown should happen. The ID or the control itself can be given.</documentation>
				</parameter>
				<parameter name="backData" type="sap.ui.core/object">
					<documentation>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as &quot;backData&quot; property. (The original data from the &quot;to()&quot; navigation will still be available as &quot;data&quot; property.)

In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.

When the &quot;transitionParameters&quot; object is used, this &quot;data&quot; object must also be given (either as object or as null) in order to have a proper parameter order.</documentation>
				</parameter>
				<parameter name="transitionParameters" type="sap.ui.core/object">
					<documentation>This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
The animation type can NOT be selected here - it is always the inverse of the &quot;to&quot; navigation.

In order to use the &quot;transitionParameters&quot; property, the &quot;data&quot; property must be used (at least &quot;null&quot; must be given) for a proper parameter order.

NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</documentation>
				</parameter>
			</parameters>
		</method>
		<method name="toMaster" type="sap.m/SplitApp">
			<documentation>navigate to given master page</documentation>
			<parameters>
				<parameter type="sap.ui.core/string" name="pageId">
					<documentation>The screen to which drilldown should happen. The ID or the control itself can be given.</documentation>
				</parameter>
				<parameter name="transitionName" type="sap.ui.core/string">
					<documentation>The type of the transition/animation to apply. This parameter can be omitted; then the default is &quot;slide&quot; (horizontal movement from the right).
Other options are: &quot;fade&quot;, &quot;flip&quot;, and &quot;show&quot; and the names of any registered custom transitions. 

None of the standard transitions is currently making use of any given transition parameters.</documentation>
				</parameter>
				<parameter name="data" type="sap.ui.core/object" since="1.7.1">
					<documentation>This optional object can carry any payload data which should be made available to the target page. The &quot;beforeShow&quot; event on the target page will contain this data object as &quot;data&quot; property.

Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.

When the &quot;transitionParameters&quot; object is used, this &quot;data&quot; object must also be given (either as object or as null) in order to have a proper parameter order.</documentation>
				</parameter>
				<parameter name="transitionParameters" type="sap.ui.core/object" since="1.7.1">
					<documentation>This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.

For a proper parameter order, the &quot;data&quot; parameter must be given when the &quot;transitionParameters&quot; parameter is used. (it can be given as &quot;null&quot;)

NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition. 
The &quot;show&quot;, &quot;slide&quot; and &quot;fade&quot; transitions do not use any parameter.</documentation>
				</parameter>
			</parameters>
		</method>
		<method name="toDetail" type="sap.m/SplitApp">
			<documentation>navigate to given detail page</documentation>
			<parameters>
				<parameter name="pageId" type="sap.ui.core/string">
				</parameter>
				<parameter name="transitionName" type="sap.ui.core/string">
					<documentation>The type of the transition/animation to apply. This parameter can be omitted; then the default is &quot;slide&quot; (horizontal movement from the right).
Other options are: &quot;fade&quot;, &quot;flip&quot;, and &quot;show&quot; and the names of any registered custom transitions. 

None of the standard transitions is currently making use of any given transition parameters.</documentation>
				</parameter>
				<parameter name="data" type="sap.ui.core/object">
					<documentation>This optional object can carry any payload data which should be made available to the target page. The &quot;beforeShow&quot; event on the target page will contain this data object as &quot;data&quot; property.

Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.

When the &quot;transitionParameters&quot; object is used, this &quot;data&quot; object must also be given (either as object or as null) in order to have a proper parameter order.</documentation>
				</parameter>
				<parameter name="transitionParameter" type="sap.ui.core/object">
					<documentation>This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.

For a proper parameter order, the &quot;data&quot; parameter must be given when the &quot;transitionParameters&quot; parameter is used. (it can be given as &quot;null&quot;)

NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition. 
The &quot;show&quot;, &quot;slide&quot; and &quot;fade&quot; transitions do not use any parameter.</documentation>
				</parameter>
			</parameters>
		</method>
		<method name="backMaster" type="sap.m/SplitApp">
			<documentation>navigate back within MasterView</documentation>
			<parameters>
				<parameter name="backData" type="sap.ui.core/object">
					<documentation>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as &quot;backData&quot; property. (The original data from the &quot;to()&quot; navigation will still be available as &quot;data&quot; property.)

In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.

When the &quot;transitionParameters&quot; object is used, this &quot;data&quot; object must also be given (either as object or as null) in order to have a proper parameter order.</documentation>
				</parameter>
				<parameter name="transitionParameter" type="sap.ui.core/object">
					<documentation>This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
The animation type can NOT be selected here - it is always the inverse of the &quot;to&quot; navigation.

In order to use the &quot;transitionParameters&quot; property, the &quot;data&quot; property must be used (at least &quot;null&quot; must be given) for a proper parameter order.

NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</documentation>
				</parameter>
			</parameters>
		</method>
		<method name="backDetail" type="sap.m/SplitApp">
			<documentation>navigate back within DetailView</documentation>
			<parameters>
				<parameter name="backData" type="sap.ui.core/object">
					<documentation>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as &quot;backData&quot; property. (The original data from the &quot;to()&quot; navigation will still be available as &quot;data&quot; property.)

In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.

When the &quot;transitionParameters&quot; object is used, this &quot;data&quot; object must also be given (either as object or as null) in order to have a proper parameter order.</documentation>
				</parameter>
				<parameter name="transitionParameter" type="sap.ui.core/object">
					<documentation>This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
The animation type can NOT be selected here - it is always the inverse of the &quot;to&quot; navigation.

In order to use the &quot;transitionParameters&quot; property, the &quot;data&quot; property must be used (at least &quot;null&quot; must be given) for a proper parameter order.

NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</documentation>
				</parameter>
			</parameters>
		</method>
		<method name="showMaster" type="sap.m/SplitApp">
			<documentation>When in ShowHideMode and the device is in portrait mode, this function can be used to make the master page visible.</documentation>
		</method>
		<method name="hideMaster" type="sap.m/SplitApp">
			<documentation>When in ShowHideMode and the device is in portrait mode, this function can be used to hide the master page.</documentation>
		</method>
		<method name="getCurrentMasterPage" type="sap.ui.core/Control">
			<documentation>Returns the current shown master page.</documentation>
		</method>
		<method name="getCurrentDetailPage" type="sap.ui.core/Control">
			<documentation>Returns the current shown detail page.</documentation>
		</method>
		<method name="backToTopMaster" type="sap.ui.core/Control">
			<documentation>Navigates back to the initial/top level of Master (this is the element aggregated as &quot;initialPage&quot;, or the first added element). If already on the initial page, nothing happens.
The transition effect which had been used to get to the current page is inverted and used for this navigation.</documentation>
			<parameters>
				<parameter name="backData" type="sap.ui.core/object">
					<documentation>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as &quot;backData&quot; property. (The original data from the &quot;to()&quot; navigation will still be available as &quot;data&quot; property.)

In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.

When the &quot;transitionParameters&quot; object is used, this &quot;data&quot; object must also be given (either as object or as null) in order to have a proper parameter order.</documentation>
				</parameter>
				<parameter name="transitionParameter" type="sap.ui.core/object">
					<documentation>This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
The animation type can NOT be selected here - it is always the inverse of the &quot;to&quot; navigation.

In order to use the &quot;transitionParameters&quot; property, the &quot;data&quot; property must be used (at least &quot;null&quot; must be given) for a proper parameter order.

NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</documentation>
				</parameter>
			</parameters>
		</method>
		<method name="backToTopDetail" type="sap.ui.core/Control">
			<documentation>Navigates back to the initial/top level of Detail (this is the element aggregated as &quot;initialPage&quot;, or the first added element). If already on the initial page, nothing happens.
The transition effect which had been used to get to the current page is inverted and used for this navigation.</documentation>
	<parameters>
				<parameter name="backData" type="sap.ui.core/object">
					<documentation>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as &quot;backData&quot; property. (The original data from the &quot;to()&quot; navigation will still be available as &quot;data&quot; property.)

In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.

When the &quot;transitionParameters&quot; object is used, this &quot;data&quot; object must also be given (either as object or as null) in order to have a proper parameter order.</documentation>
				</parameter>
				<parameter name="transitionParameter" type="sap.ui.core/object">
					<documentation>This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
The animation type can NOT be selected here - it is always the inverse of the &quot;to&quot; navigation.

In order to use the &quot;transitionParameters&quot; property, the &quot;data&quot; property must be used (at least &quot;null&quot; must be given) for a proper parameter order.

NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</documentation>
				</parameter>
			</parameters>
		</method>
	</methods>
</control>
